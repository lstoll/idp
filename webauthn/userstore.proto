syntax = "proto3";
package lstoll.idp.webauthn;

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";


option go_package = "github.com/lstoll/idp/webauthn/webauthnpb";

// WebAuthnUserService is used by the WebAuthn connector to retrieve and manage
// user information
service WebAuthnUserService {
	// GetUser returns the user
	rpc GetUser(GetUserRequest) returns (GetUserResponse);
	// AddAuthenticatorToUser should associate the given user with the given
	// authenticator
	rpc AddAuthenticatorToUser(AddAuthenticatorRequest) returns (google.protobuf.Empty);
	// UserAuthenticators should return all the authenticators registered to the
	// given user
	rpc UserAuthenticators(GetUserRequest) returns (GetAuthenticatorsResponse);
	// GetAuthenticator returns the authenticator matching the provided ID
    rpc GetAuthenticator(GetAuthenticatorRequest) returns (GetAuthenticatorResponse);
    // DeleteAuthenticator removes the authenticator from the system
	rpc DeleteAuthenticator(DeleteAuthenticatorRequest) returns (google.protobuf.Empty);
}

message GetUserRequest {
    string username = 1;
}

message GetUserResponse {
    WebauthnUser user = 1;
}

message AddAuthenticatorRequest {
    string username = 1;
    WebauthnAuthenticator authenticator = 2;
}

message GetAuthenticatorsResponse {
    repeated WebauthnAuthenticator authenticators = 1;
}

message GetAuthenticatorRequest {
    bytes authenticator_id = 1;
}

message GetAuthenticatorResponse {
    WebauthnAuthenticator authenticator = 1;
}

message DeleteAuthenticatorRequest {
    bytes authenticator_id = 1;
}

message WebauthnUser {
    // a unique identifier for this user
    string username = 1;
    // Display name
    string name = 2;
    string email = 3;
    repeated string groups = 4;
    repeated bytes authenticator_ids = 5;
}

// WebauthnAuthenticator represents an authenticator device
message WebauthnAuthenticator {
    // user_id that this authenticator belongs to
    string username = 1;
    // How to reference this authenticator
    string display_name = 2;
    // if this is a usable, activated authenticator
    bool active = 3;
    // A code word to confirm the authenticatators activation request
    string activation_challenge = 4;
    /* webauthn data */
    bytes id = 5;
	bytes credential_id = 6;
	bytes public_key = 7;
	bytes aaguid = 8;
	uint32 sign_count = 9;
}