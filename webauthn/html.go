// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// webauthn/webauthn.js
// webauthn/webauthn.tmpl.html
package webauthn

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _webauthnWebauthnJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x56\x5d\x8f\xe3\x34\x14\x7d\x4e\x7f\xc5\x7d\x4b\xca\x94\xa4\x20\x84\x50\x87\x22\x95\xee\x4a\x7c\x08\x06\x69\x06\xf1\x80\x10\x72\xec\x9b\xc4\xb3\xa9\x1d\xd9\x37\xd3\xad\x56\xfd\xef\xc8\x8e\xd3\xa4\x9d\x29\xdb\x8a\xe1\x6d\xe7\xc1\xd2\xd8\xf7\x9c\x7b\xee\x47\x8f\x92\x65\x50\x11\x35\x76\x91\x65\xa5\xa4\xaa\xcd\x53\xae\x37\xd9\x3b\x8d\x56\xe2\x17\xf3\x6c\x8b\x39\x6b\xa9\x52\x59\x5e\xeb\x3c\xdb\x30\x4b\x68\x0e\x97\xe9\xa3\x9d\x64\x19\xfc\xa2\x85\x2c\x24\x67\x24\xb5\xb2\x0b\x77\xf3\x19\xac\xea\x5a\x6f\xa1\x61\xd6\x4a\x55\x02\x83\x5c\x8b\x1d\x90\x06\x83\xa5\x74\x1c\x93\x09\xaf\x99\xb5\xf0\x07\xe6\x2b\x47\x05\x1f\x26\x51\x96\xc1\x1b\xe4\x5a\xa0\x8b\x67\x16\xbf\xfe\x0a\x2c\x19\x87\x97\x8a\x34\x30\xf8\x5d\x2a\xfa\x66\x65\x0c\xdb\xa5\x93\xc8\x12\x23\xc9\xe1\x6f\xe1\x21\xdf\xb7\x45\x81\x26\x79\x62\x75\x8b\x53\x47\x16\x19\xa4\xd6\xa8\x31\xa6\x30\x7a\x93\x30\xd2\x79\x08\x9b\x01\x87\xe5\x77\xc0\x53\x5e\x31\xb3\xd6\x02\x57\x94\xcc\xa7\xd3\xdb\x49\xb4\x9f\x78\x35\x6f\x55\xa7\x46\x81\x27\xe8\x72\xf4\x62\x8e\x14\x8e\xf4\xa0\xfa\x57\x3d\x39\x69\x96\x28\xdc\x8e\x84\x85\xa8\xd4\xa0\x68\x39\x26\x89\x9d\x41\xbe\x23\x9c\x3a\x71\x16\x6e\xe0\xbe\x4b\xe1\xe4\xaf\x83\xd2\xc4\x07\xcc\x20\x8e\xc7\x7a\xd7\x15\xf2\x77\x16\xb6\x15\x52\x85\x06\xa8\x42\x70\xaa\x5a\x0b\x5d\x72\x14\xb0\x61\xc4\x2b\xb4\xe3\xb7\x52\x3e\xa1\x1a\x15\xc0\x1d\xcb\xbd\x7f\x4b\xba\x90\xa3\x02\x0c\x5a\x27\xcc\xdd\x44\xb2\x80\xc4\xa0\x4d\x03\xd3\x72\xb9\x84\x31\x62\x8c\xb9\x75\xff\xef\xdd\x41\x95\xd1\x5b\x70\x2d\x78\x6b\x8c\x36\x23\x82\x07\x7c\x4f\xae\x9c\x68\x1f\x6a\xea\xb7\x25\x11\x8c\xd8\x91\x8a\x02\x89\x57\x49\x3c\xec\x67\x17\x6a\xfc\x12\x66\x96\x98\xa1\x78\x06\x1f\x26\x70\xf2\xb7\x41\xaa\xb4\x58\x40\xfc\xdb\xdd\xfd\x43\x3c\x7b\xf6\xee\xf6\x74\x01\x3f\xdd\xdf\xfd\x9a\x76\x93\x95\xc5\xae\xcb\xee\xf5\xfb\x33\xa5\x0a\x55\xd2\x6f\x6e\x7a\xd4\xb0\x2f\xe7\xf3\xe9\x28\x28\x34\xcb\x95\xf8\x68\xb5\x4a\x5e\x78\xeb\x1b\x65\xd3\xa6\xcd\x6b\xc9\x7f\xc6\x9d\x5b\xc8\xba\x46\x55\x22\x2c\x61\xc8\x73\xb4\xe9\x67\x00\xbe\x7d\xa7\x74\xad\x45\x93\x4a\x71\x29\x59\x08\x0f\x54\xfd\x8c\x87\x77\x7c\xcf\xeb\x56\xe0\xda\xa0\x40\x45\x92\xd5\x87\x71\x47\x85\x36\x90\x3c\x31\x03\x12\x96\x30\xbf\x05\x09\xdf\xc2\xc7\xc0\xa9\x13\x4e\xd5\x2d\xc8\x9b\x9b\x03\x51\xf4\x31\xd4\x9f\xf2\xaf\x2b\x4a\x3a\x87\x0f\x35\x76\x8b\x19\xce\xd3\x9d\x7d\x3e\x32\xc5\x9e\x64\xc9\x48\x9b\x94\x8f\xca\xe0\x06\x19\xa1\x8b\x19\x4f\x79\x88\x18\x0f\xfb\x82\x1d\x2e\xa4\x92\xb6\xf2\x4b\xec\x25\x9e\x6e\xae\xbf\xac\x90\x09\x34\x76\x71\x68\x5b\xbc\xe2\x1c\x1b\x8a\x17\x10\xb3\xa6\xa9\x83\x2b\x67\x6e\xf9\x7a\x4c\x14\xaf\xb5\x22\x54\xf4\xf9\xc3\xae\xc1\x17\x23\x43\x53\x02\xe0\xc5\xdf\x44\x9f\x50\x8a\x05\x0c\x35\xa6\x52\xf4\x59\x0c\xdb\xfe\x28\x16\xa3\xf1\x1c\x19\xe3\x08\xe2\x03\xa7\xb3\x61\xee\x8d\x56\x16\x87\x92\x22\x46\x84\xde\x9c\xb4\xba\xcb\x1f\x91\xd3\x45\xac\x81\x27\x7d\x86\x3e\xa4\x8a\x78\x2d\x51\xd1\x1b\x46\xcc\x15\x77\x15\xeb\x31\x74\x1a\x18\xfb\x8e\x45\xb4\x6b\xf0\xa8\x2f\xee\x22\x74\x35\xe4\xdf\xbf\x96\xa3\x04\xaf\xac\x75\x29\xd5\x05\x46\xe9\xe3\x3e\x39\xe4\x73\x5b\x63\xee\x93\xe5\xac\xa9\xd5\x48\xe7\x4d\xed\x14\x7a\x89\xa5\x9d\x62\xae\x33\xb4\x97\xd1\xaf\x69\x67\x25\xd2\x7f\xf1\xb2\x6e\xcd\x3e\x99\xd8\xeb\x7b\xcd\xc1\xbe\x5c\xa3\x5d\x2c\x77\xb3\x73\xcf\xd7\xf9\xe2\x29\x7a\x20\xb6\xb2\x54\x8c\x5a\x83\x57\x11\x1e\x50\x03\x91\xfb\x92\xf8\x81\x29\x51\x5f\xc7\x34\xc0\x0e\x54\xff\x9b\xb3\x7a\xf7\xdc\xff\x13\x00\x00\xff\xff\x45\x94\x55\x04\x06\x0d\x00\x00")

func webauthnWebauthnJsBytes() ([]byte, error) {
	return bindataRead(
		_webauthnWebauthnJs,
		"webauthn/webauthn.js",
	)
}

func webauthnWebauthnJs() (*asset, error) {
	bytes, err := webauthnWebauthnJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "webauthn/webauthn.js", size: 3334, mode: os.FileMode(420), modTime: time.Unix(1547439816, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _webauthnWebauthnTmplHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x58\x4d\x8f\xdb\x36\x13\xbe\xef\xaf\x98\xe8\x3d\xac\x8d\x37\x92\x1a\x34\x97\xa6\x92\x81\x34\x69\xd0\x00\x5b\x20\x28\x5a\xe4\x58\xd0\xe4\xd8\xe2\x2e\x45\x0a\xe4\xc8\x8e\xbb\xf0\x7f\x2f\xa8\x2f\x4b\xb6\xe4\xd8\xc9\x06\x48\x75\xb1\x44\x0f\x67\x9e\xf9\x7a\x34\x62\x92\x51\xae\x16\x37\x37\x49\x86\x4c\x2c\x6e\x00\x00\x12\x92\xa4\x70\xf1\x11\x97\xac\xa4\x4c\x27\x71\xfd\x5c\xff\xa7\xa4\x7e\x80\xcc\xe2\x2a\x0d\xe2\x98\x0b\x1d\xe5\xa5\xe4\xce\x45\xdc\xe4\x71\x5e\xca\xf0\x87\xe8\xa7\xe8\xe5\x8b\x98\x3b\xe7\x1f\xa3\x5c\xea\x88\x3b\x17\x80\x45\x95\x06\x8e\x76\x0a\x5d\x86\x48\x01\xd0\xae\xc0\x34\x20\xfc\x44\x71\x25\x10\x37\x06\x1c\xb7\xb2\x20\x70\x96\x9f\xb7\x70\x7f\x30\x70\xef\x82\x45\x12\xd7\x1b\xc7\xb4\x6c\x1b\x4f\x46\x05\x3d\xa4\xfa\xde\x5f\x51\x26\x05\xc2\x63\xf7\xdc\x5e\x42\xba\x42\xb1\xdd\x2b\xd0\x46\xe3\xcf\x83\xbf\xf7\xdd\x53\x12\x37\xda\x92\xb8\x8e\xe6\x4d\xb2\x34\x62\xd7\x58\xf2\x4b\x68\x81\x2b\xe6\x5c\x1a\x78\x4f\x58\x51\x2c\x99\x05\x7f\x1b\xfe\xf3\x22\x38\xa0\x48\x9e\x85\x21\xbc\xae\xff\xfd\xed\xcf\xdf\xef\x60\x6d\xd0\x41\x86\x16\x21\x0c\x1b\x75\x71\xad\xaf\x79\x12\x72\x03\x52\xa4\x01\x37\x9a\x50\x53\xb8\xb5\xac\x28\xd0\xf6\x75\x7a\x91\x9e\xf1\xc6\x7a\x98\xa1\x5c\x67\xe4\xe3\x22\xe4\x66\x5a\xdc\x2b\x66\x52\xa3\x0d\x57\xaa\x94\x22\x58\xdc\x0c\x82\x50\x21\x7e\x8b\x2b\x56\x2a\x02\xb2\x3b\x60\x5a\x80\x0f\x3a\x14\x6c\x7d\x40\x3d\xd0\xee\xf1\x2a\xb3\x96\x9a\x33\x2b\x82\xbe\x31\x6b\xb6\xc1\xe2\x24\x07\xa7\x90\x54\x98\x8b\xf0\x25\xf4\x1e\xcc\x6a\xe5\x90\xc2\x97\x23\xdb\xc7\x54\x14\x4c\xa3\xaa\x13\xe0\x2b\x31\xe4\xa8\x69\x10\xb5\x13\x05\xc5\xe2\xce\x43\x86\xad\xa4\x0c\x76\xa6\xb4\x80\x9f\xa4\x23\xa9\xd7\x95\xbb\xa8\x49\x72\x46\xc6\x26\x71\x71\x4e\x4b\x0b\xa2\x2a\x37\x85\x4c\x04\x87\x70\xdc\x19\x26\xa4\x5e\x07\x8d\x25\x47\xcc\x12\x8a\xe7\x50\x28\x64\x0e\x81\x58\x51\x1b\x1e\xd8\x8b\xce\x1b\x5c\x19\x9b\x1f\x2c\xbc\x33\x36\x3f\xe3\x64\xb5\x43\xea\xa2\xa4\x5e\x97\x06\xa0\x59\x8e\x69\x50\x3a\xb4\xfe\xae\x07\xf8\xaf\x6e\xa9\xf1\xca\x5b\xab\x2a\xc6\x1a\x15\x40\xa1\x18\xc7\xcc\x28\x81\x36\x0d\x3a\xd9\xb3\xd6\xfd\xb5\x61\xaa\xc4\x34\x78\x7c\x84\xa8\xdd\x04\xfb\x7d\x47\x14\x93\xc0\x97\x25\x91\xd1\x0d\x72\x57\x2e\x73\x49\x1d\xb0\x25\x69\x58\x92\x0e\x5d\xc9\x39\x3a\x07\x39\x85\x3f\x36\x71\x4e\xe2\x7a\xe3\x99\x20\xc6\xde\xaf\xb3\xb5\x91\xb0\x2a\x2a\x16\xd7\xd2\x11\x5a\x4f\x96\x41\xc3\x96\xff\x0b\x16\x7f\x34\xcb\xf0\x80\xbb\x24\x66\x8b\xc9\x94\x1d\xf5\xe2\x99\xe5\x66\xe9\xb4\x17\x3b\x5b\x55\xe6\x27\xfb\xaf\x45\x3a\xd6\x82\xe0\x8b\xf3\xbb\xed\xc3\x89\x0e\x6a\x1d\xea\x9a\xa8\x0d\x84\xd4\xeb\x28\x8a\xe0\xc3\x53\x34\x51\x6b\xe4\xe9\xfa\xe8\x00\x7b\x2d\xf5\x55\x7d\xf4\x0d\xfa\xa1\x0d\xd9\xd7\xb5\xc4\x13\x14\xf1\x9b\x8c\x29\x85\x7a\x8d\xed\xfb\x77\xba\x90\x79\x2b\xfa\xdf\xab\xe4\x26\xde\x96\x91\x34\x1a\xea\x0c\x11\x8a\xcf\xbc\x41\x16\x4d\x25\x33\xf7\xd0\x54\xb2\xc8\xa5\xae\xf5\x18\x0b\x64\x80\x1b\xbd\x92\x36\x07\xca\x10\x50\x5b\xa3\x54\x8e\x9a\x3e\xa7\x36\x71\x64\x8d\x5e\x2f\x12\x57\x30\x5d\x85\xb6\xde\xdb\xe5\xa2\x1a\xa1\x0a\xa6\xfd\x4f\x23\xfa\xf4\x3c\xd6\x13\xe9\xdf\xae\x8c\xa1\x76\xe6\x19\x8b\x7e\x37\xa5\x9c\xcb\xc0\x40\x77\xab\x71\x30\x36\xf6\x66\xd3\x7b\xb6\x61\xf5\x6a\x4f\x83\x42\x82\xb6\x63\x3f\xa0\xf6\x44\x03\x29\xac\x98\x72\xbd\xd9\xd0\x0b\x55\xaf\xc7\x13\x89\x81\xc8\x16\x52\xd0\xb8\x85\x8f\xb8\x7c\xed\x87\xd4\xd9\xbc\x27\x20\x0c\x2f\x7d\xd2\xa2\x35\xd2\xaf\x0a\xfd\xed\x2f\xbb\xf7\x62\x36\x64\xa0\x79\x64\x74\x5d\x36\xde\x46\xa9\x79\x55\x48\x33\x9c\x1f\x0d\xb2\x18\x15\x16\x37\xa8\xa9\x19\xd4\xbc\xa9\xfe\xff\x72\x05\xb3\x23\xb7\xe6\x60\x91\x4a\xab\x87\x82\xa7\xbe\x93\x2d\x8f\xc6\xe2\xcf\x42\x6f\x19\x7a\x1e\x55\x09\xbc\x93\x8e\x22\x8b\xb9\xd9\xe0\xac\x22\xf5\xe0\x08\xdd\x36\x6a\x77\xce\x1e\xe1\x40\x9f\xaf\x26\x2d\xdd\x0e\x48\xf5\x76\x1e\x55\x13\x05\xec\xe7\x27\x05\x19\xf9\x77\xc0\xcc\xa2\x83\x74\x31\x32\xfc\x8f\xbb\x7c\x94\xee\xaf\xf6\x9d\x09\x31\xee\x78\x7b\xc5\x31\xbc\x6d\x68\xb0\x63\xbb\x2f\x33\x5f\x71\xe4\x55\xb6\x27\x55\x1e\x93\xc3\x3c\xf2\x6d\xf3\xa6\xfe\x0c\x81\x14\x2c\xba\xa8\x43\x7b\xa5\xee\x21\xa7\x5f\x5a\x27\xfe\x1a\xcb\x31\x67\xc4\xb3\x19\x5a\x3b\x9d\x64\x6e\xb4\x33\x0a\x23\xb4\xd6\x58\x2f\x7a\xaa\xc6\x5f\x4c\xa1\xa5\xd9\xed\x3b\x26\x15\x0a\xcf\xb4\x6d\x5c\x5f\xc1\x2d\xfc\x1f\xfc\xbe\xcb\x20\x55\x65\x37\x9b\x7f\xb7\x55\xb7\x3f\x5a\x8b\x63\xd8\x66\xa8\x3b\x58\x28\xa0\x99\x1c\x56\xa5\x52\xbb\xe7\xc0\x88\x30\x2f\xa8\x3f\x55\x49\xa3\x3b\x1d\xfb\x6b\xa8\xad\x1a\x9e\x3d\xb5\x71\x25\xf9\xc3\x79\x66\x9b\x54\x76\xf8\xbe\xbc\xc8\xe9\xeb\x3b\x67\xaa\x12\xfb\xae\x76\xc0\x9b\xf0\xbc\x1e\x44\x67\x76\xec\x8c\xa7\xe1\xfe\x8b\x63\x9c\x83\x8f\x5e\x2d\x57\x10\xf0\xe0\x23\xf3\x72\xf6\xad\xb6\x5d\x48\xbd\x47\xdf\x85\x97\x52\xaf\x27\x8b\x7b\xe7\x43\xf2\x45\x1c\xbd\x95\x5a\x18\x0f\xb4\x0e\x6c\xe4\x3f\xbc\x1a\x0a\xb2\x28\xa4\x45\x4e\x7f\x93\xf9\x86\x6c\x31\xde\x97\x27\x74\x51\x05\xe7\xc9\xb9\x62\x7c\xd6\x18\x93\xbc\xbe\x32\x2e\x66\x89\xfd\x05\x0d\x7e\x38\x82\x78\xaa\xc1\x65\xa2\xaf\x46\x61\xc5\x31\xbc\x5f\xc1\x16\x21\x63\x1b\x04\x06\x85\x45\x87\x28\x50\x40\x5b\xd7\xcf\xeb\x83\x2b\x99\xe7\x28\x24\x23\x54\xbb\x6e\xb3\x6f\xcd\x2b\x6b\xfe\x59\x0a\x41\x70\xec\xd0\x05\x80\xa1\x3e\x50\x6c\xce\x2a\x93\xb8\x3e\x49\xbc\x49\xe2\xea\xc0\xf6\xdf\x00\x00\x00\xff\xff\x79\x25\x6f\x2f\xb7\x15\x00\x00")

func webauthnWebauthnTmplHtmlBytes() ([]byte, error) {
	return bindataRead(
		_webauthnWebauthnTmplHtml,
		"webauthn/webauthn.tmpl.html",
	)
}

func webauthnWebauthnTmplHtml() (*asset, error) {
	bytes, err := webauthnWebauthnTmplHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "webauthn/webauthn.tmpl.html", size: 5559, mode: os.FileMode(420), modTime: time.Unix(1547440301, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"webauthn/webauthn.js":        webauthnWebauthnJs,
	"webauthn/webauthn.tmpl.html": webauthnWebauthnTmplHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"webauthn": &bintree{nil, map[string]*bintree{
		"webauthn.js":        &bintree{webauthnWebauthnJs, map[string]*bintree{}},
		"webauthn.tmpl.html": &bintree{webauthnWebauthnTmplHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
